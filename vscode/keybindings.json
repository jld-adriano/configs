// Place your key bindings in this file to override the defaults
[
  {
    "key": "cmd+g",
    "command": "-editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "cmd+g",
    "command": "-editor.action.simpleInlineDiffs.acceptAll",
    "when": "editorTextFocus && hasDisplayedSimpleDiff"
  },
  {
    "key": "cmd+g c",
    "command": "git.commit"
  },
  {
    "key": "cmd+g cmd+s",
    "command": "git.stage"
  },
  {
    "key": "cmd+g s",
    "command": "git.stageSelectedRanges"
  },
  {
    "key": "cmd+k alt+cmd+s",
    "command": "-git.stageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "cmd+g shift+s",
    "command": "git.unstageSelectedRanges"
  },
  {
    "key": "cmd+k cmd+n",
    "command": "-git.unstageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "cmd+g a",
    "command": "git.commitStagedAmend"
  },
  {
    "key": "ctrl+z",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+x",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateForward"
  },
  {
    "key": "ctrl+shift+-",
    "command": "-workbench.action.navigateForward",
    "when": "canNavigateForward"
  },
  {
    "key": "alt+space",
    "command": "-workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
  },
  {
    "key": "alt+\\",
    "command": "-editor.action.inlineSuggest.trigger",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "alt+space",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+space",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "cmd+e",
    "command": "-aichat.chatToTask"
  },
  {
    "key": "cmd+e",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "f12",
    "command": "-editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+c",
    "command": "editor.action.jumpToBracket",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+[IntlBackslash]",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+f",
    "command": "-cursorRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+f",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysInsert.f && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+f",
    "command": "-vscode-neovim.ctrl-f",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.f && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "alt+f",
    "command": "leap.findForward"
  },
  {
    "key": "shift+alt+f",
    "command": "leap.findBackward"
  },
  {
    "key": "shift+alt+f",
    "command": "-notebook.formatCell",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "shift+alt+f",
    "command": "-editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "key": "shift+alt+f",
    "command": "-editor.action.formatDocument.none",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  },
  {
    "key": "shift+alt+f",
    "command": "-notebook.format",
    "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "shift+alt+f",
    "command": "-filesExplorer.findInFolder",
    "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "shift+alt+f",
    "command": "-search.action.restrictSearchToFolder",
    "when": "folderMatchWithResourceFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+1",
    "command": "-workbench.action.openEditorAtIndex1"
  },
  {
    "key": "ctrl+2",
    "command": "-workbench.action.openEditorAtIndex2"
  },
  {
    "key": "ctrl+3",
    "command": "-workbench.action.openEditorAtIndex3"
  },
  {
    "key": "ctrl+4",
    "command": "-workbench.action.openEditorAtIndex4"
  },
  {
    "key": "ctrl+5",
    "command": "-workbench.action.openEditorAtIndex5"
  },
  {
    "key": "ctrl+6",
    "command": "-workbench.action.openEditorAtIndex6"
  },
  {
    "key": "ctrl+7",
    "command": "-workbench.action.openEditorAtIndex7"
  },
  {
    "key": "ctrl+8",
    "command": "-workbench.action.openEditorAtIndex8"
  },
  {
    "key": "ctrl+9",
    "command": "-workbench.action.openEditorAtIndex9"
  },
  {
    "key": "ctrl+1",
    "command": "workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "cmd+1",
    "command": "-workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "ctrl+2",
    "command": "workbench.action.focusSecondEditorGroup"
  },
  {
    "key": "cmd+2",
    "command": "-workbench.action.focusSecondEditorGroup"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.focusThirdEditorGroup"
  },
  {
    "key": "cmd+3",
    "command": "-workbench.action.focusThirdEditorGroup"
  },
  {
    "key": "alt+z",
    "command": "editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+cmd+[",
    "command": "-editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+z",
    "command": "-editor.action.toggleWordWrap"
  },
  {
    "key": "alt+z",
    "command": "-workbench.action.terminal.sizeToContentWidth",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
  },
  {
    "key": "cmd+r cmd+0",
    "command": "-editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "shift+alt+z",
    "command": "editor.foldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "cmd+r cmd+-",
    "command": "-editor.foldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+cmd+]",
    "command": "-editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "shift+alt+x i",
    "command": "-extension.refactorix.String.Interpolate",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+x g",
    "command": "-extension.refactorix.Property.ToGetterSetter",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+x s",
    "command": "-extension.refactorix.SplitVariableDeclaration",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+x",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "cmd+r cmd+j",
    "command": "-editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+x",
    "command": "editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "cmd+r cmd+]",
    "command": "-editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+`",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "shift+cmd+e",
    "command": "editor.action.goToTypeDefinition"
  },
  {
    "key": "shift+cmd+e",
    "command": "-workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "shift+cmd+e",
    "command": "-aichat.fixerrormessage",
    "when": "(arbitrary function)"
  },
  {
    "key": "ctrl+n",
    "command": "-cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-list.focusDown",
    "when": "inReferenceSearchEditor && neovim.mode == 'normal'"
  },
  {
    "key": "ctrl+n",
    "command": "-selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+n",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+n",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+n",
    "command": "-showNextParameterHint",
    "when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+alt+n",
    "command": "editor.action.marker.next",
    "when": "editorFocus"
  },
  {
    "key": "alt+f8",
    "command": "-editor.action.marker.next",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen && neovim.wildMenuVisible || inQuickOpen && neovim.mode != 'cmdline'"
  },
  {
    "key": "ctrl+n",
    "command": "-vscode-neovim.send-cmdline",
    "when": "neovim.init && neovim.mode == 'cmdline'"
  },
  {
    "key": "ctrl+n",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.n && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+n",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysInsert.n && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+alt+b",
    "command": "editor.action.marker.prev",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+f8",
    "command": "-editor.action.marker.prev",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "alt+f5",
    "command": "-workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.editor.nextChange",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "alt+f5",
    "command": "-workbench.action.editor.nextChange",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "shift+alt+f5",
    "command": "-workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.editor.previousChange",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "shift+alt+f5",
    "command": "-workbench.action.editor.previousChange",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "cmd+f",
    "command": "-actions.find",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+shift+alt+f",
    "command": "actions.find"
  },
  {
    "key": "alt+[IntlBackslash]",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+shift+cmd+e",
    "command": "references-view.findReferences",
    "when": "editorHasReferenceProvider"
  },
  {
    "key": "shift+alt+f12",
    "command": "-references-view.findReferences",
    "when": "editorHasReferenceProvider"
  },
  {
    "key": "cmd+g p",
    "command": "runCommands",
    "args": {
      "commands": [
        {
          "command": "workbench.action.terminal.new",
          "args": {
            "env": {
              "DIRENV_LOG": ""
            }
          }
        },
        "workbench.action.toggleMaximizedPanel",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "gprps && echo 'Command succeeded. Closing ...' && osascript -e 'tell application \"System Events\" to keystroke \"j\" using {command down}' && sleep 0.5 && exit || (echo 'Command failed. Press any key to close this terminal.' && read -n 1 -s)\u000D"
          }
        }
      ]
    }
  },
  {
    "key": "cmd+g cmd+p",
    "command": "runCommands",
    "args": {
      "commands": [
        {
          "command": "workbench.action.terminal.new",
          "args": {
            "env": {
              "DIRENV_LOG": ""
            }
          }
        },
        "workbench.action.toggleMaximizedPanel",
        {
          "command": "workbench.action.terminal.sendSequence",

          "args": {
            "text": "gprpsp && echo 'Command succeeded. Closing ...' && osascript -e 'tell application \"System Events\" to keystroke \"j\" using {command down}' && sleep 0.5 && exit || (echo 'Command failed. Press any key to close this terminal.' && read -n 1 -s)\u000D"
          }
        }
      ]
    }
  },
  {
    "key": "cmd+g r",
    "command": "git.unstageAll"
  },
  {
    "key": "cmd+g d",
    "command": "git.clean"
  },
  {
    "key": "ctrl+shift+alt+right",
    "command": "-cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+right",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+right",
    "command": "-editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+g f",
    "command": "runCommands",
    "args": {
      "commands": [
        {
          "command": "workbench.action.terminal.new",
          "args": {
            "env": {
              "DIRENV_LOG": ""
            }
          }
        },
        "workbench.action.toggleMaximizedPanel",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "gcf; echo 'Command succeeded. Closing ...' && osascript -e 'tell application \"System Events\" to keystroke \"j\" using {command down}' && sleep 0.5 && exit || (echo 'Command failed. Press any key to close this terminal.' && read -n 1 -s)\u000D"
          }
        }
      ]
    }
  },
  {
    "key": "shift+alt+s",
    "command": "go-to-next-change.go-to-next-scm-change"
  },
  {
    "key": "alt+z",
    "command": "-go-to-next-change.go-to-next-scm-change"
  },
  {
    "key": "alt+cmd+a",
    "command": "-go-to-next-change.go-to-previous-changed-file"
  },
  {
    "key": "shift+alt+d",
    "command": "-editor.detectLanguage",
    "when": "editorTextFocus && !notebookEditable"
  },
  {
    "key": "shift+alt+d",
    "command": "go-to-next-change.go-to-previous-scm-change"
  },
  {
    "key": "alt+a",
    "command": "-go-to-next-change.go-to-previous-scm-change"
  },
  {
    "key": "shift+alt+d",
    "command": "-notebook.cell.detectLanguage",
    "when": "notebookCellEditable && notebookEditable"
  },
  {
    "key": "ctrl+shift+alt+left",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+cmd+left",
    "command": "-editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+alt+left",
    "command": "-cursorWordPartLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+g shift+c",
    "command": "git.commitNoVerify",
    "when": "!operationInProgress"
  },
  {
    "key": "cmd+r d",
    "command": "git.revertSelectedRanges",
    "when": "!operationInProgress"
  },
  {
    "key": "cmd+r d",
    "command": "-workbench.files.action.compareWithSaved"
  },
  {
    "key": "ctrl+cmd+e",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && !inReferenceSearchEditor && !isInEmbeddedEditor"
  }
]
